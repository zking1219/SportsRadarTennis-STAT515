y = reorder(Countries,-Attended))) +
geom_point(shape = 21,fill = "cyan",
color = 'black',size = 3) +
labs(x = "Percent Births Attended\nBy Trained Personnel",
y = "Countries") +  hw
pltLeft <- ggplot(motherDeaths,aes(x = Attended,
y = reorder(Countries,-Attended))) +
geom_point(shape = 21,fill = "cyan",
color = 'black',size = 3.5) +
labs(y = "",
x = "Percent Births\n Attended By Trained Personnel") +
hwLeft
pltLeft
pltRight <- ggplot(motherDeaths,aes(x = DeathRates,
y = reorder(Countries,-Attended))) +
geom_point(shape = 21,fill = "red",
color = 'black',size = 3.5) +
labs(y = "",
x = "Maternal Deaths\nPer 1000 Live Births") +  hwRight
pltRight
grid.arrange(pltLeft,pltRight,ncol = 2,widths = c(2.6,2),
top = "Maternal Risk Giving Birth\n For Selected Countries 1990-1965")
# Get the topDown order
newLevels <- levels( with(motherDeaths,reorder(Countries,-Attended)))
topDown <- rev(newLevels)
topDown
# Reaarrange rows
subs <- match(topDown,motherDeaths$Countries)
mdSort <- motherDeaths[subs,]  # rearrange rows
# Make factor levels provide the top down order
mdSort$Countries <- factor(topDown,rev(topDown))
# Sort the rows in the desired order
ord <- order(motherDeaths$Attended)
mdSort <- motherDeaths[ord,]
mdSort
nam <- paste0("G",7:1)
Grp <- factor(rep(nam,each = 3),levels=nam)
mdSort$Grp <- Grp
windows()
pLeft <- ggplot(mdSort,aes(x = Attended, y = Countries)) +
geom_point(shape = 21,fill = "cyan",color = 'black',size = 3.5)+
facet_grid(Grp~.,scales = "free_y") +
labs(y = "",
x = "Percent Births\n Attended By Trained Personnel") + hwLeft
pLeft
pRight <- ggplot(mdSort,aes(x = DeathRates, y = Countries)) +
geom_point(shape = 21,fill = "red",color = 'black',size = 3.5) +
facet_grid(Grp~.,scales = "free_y") +
labs(y="", x="Maternal Deaths\nPer 1000 Live Births") + hwRight
pRight
windows()
grid.arrange(pLeft,pRight,ncol=2,widths=c(2.6,2),
top="Maternal Risk Giving Birth\n For Selected Countries 1990-1965")
library(tidyverse)
source('hw.R')
attend <- c(25,8,12,31,2,17,15,30,8,8,6,16,24,26,24,15,47,38,44,20,31)
deaths <- c(18,17,16,16,16,15,15,15,15,14,14,14,13,13,12,12,12,12,11,10,10)*100
nams <- c('Sierra Leone','Afghanistan','Bhutan',
'Guinea',
'Somalia',
'Angola',
'Chad',
'Mozambique',
'Nepal',
'Ethiopia',
'Eritrea',
'Yemen',
'Burundi',
'Rwanda',
'Mali',
'Niger',
'Senegal',
'Uganda',
'Gambia',
'Haiti',
'Nigeria')
motherDeaths = data.frame(Countries = nams,
DeathRates = deaths,
Attended = attend)
plt <-  ggplot(motherDeaths, aes(x = Attended, y = DeathRates)) +
geom_point( shape = 21, size = 4,
color = "black", fill = "red" ) +
geom_smooth(method = "loess", span = .90,
method.args = list(degree = 1), size = 1.5, color = "blue") +
labs(x = "Percent Births Attended By Trained Personnel",
y = "Maternal Deaths\n Per 100,000 Live Births",
title = "Maternal Risk") + hw
plt
ptLabs <- motherDeaths %>% filter(Countries %in%
c('Sierra Leone','Guinea','Haiti','Nigeria'))
ptLabs
plt + geom_label(data = ptLabs,
aes(label = Countries),
nudge_y = 45)
ptLabs <- motherDeaths %>% filter(Countries %in%
c('Sierra Leone','Guinea','Haiti','Nigeria','Afganistan'))
ptLabs
plt + geom_label(data = ptLabs,
aes(label = Countries),
nudge_y = 45)
ptLabs <- motherDeaths %>% filter(Countries %in%
c('Sierra Leone','Guinea','Haiti','Nigeria','Afghanistan'))
ptLabs
plt + geom_label(data = ptLabs,
aes(label = Countries),
nudge_y = 45)
install.packages("lattice")
install.packages("lattice")
library(lattice)
library(tidyverse)
source('hw.R')
# Entering data as four vectors.
White <- c(22, 50,  8,  2, 13,  6)
Black <- c(5, 24, 13, 24, 20, 15)
Hispanic <- c(21, 33,  9,  7, 20, 9)
Asian <- c(24, 53,  4,  1, 12,  5)
# cbind() binds vectors together as
# columns in a matrix.
mat <- cbind(white, black, hispanic, asian)
mat
# cbind() binds vectors together as
# columns in a matrix.
mat <- cbind(White, Black, Hispanic, Asian)
mat
# Defining vectors of simplified labels
type <- c( "Married, Father Working", "Married, Both Working",
"Divorced Mother","Never-married Mother",
"Other", "Grandparents")
race <- c("White","Black","Hispanic","Asian")
# Labeling matrix rows and column
colnames(mat) <- race
rownames(mat) <- type
mat
t(mat)
mat[6:1,] # reverses the rows
mat[,4:1] # reverses the columns
mat[6:1,4:1] # reverses both
oneColumn = dotplot(mat, groups = FALSE,
layout = c(1, 4), aspect = .7,
origin = 0,type = c("p","h"),
main = "Who is Raising the Children?",
xlab = "Race Rounded Percents\nMay Not Total 100",
scales = list(x = list(tck = 0, alternating = FALSE)),
panel = function(...){
panel.fill(rgb(.9,.9,.9))
panel.grid(h = 0,v = -1,col = "white",lwd = 2)
panel.dotplot(col = rgb(0,.5,1),cex = 1.1,...)
}
)
oneColumn
dotplot(mat, groups = FALSE,
layout = c(2,2),aspect = .7,
origin = 0,type = c("p","h"),
main = "Who is Raising the Children?",
xlab = "Race Rounded Percents\nMay Not Total 100",
scales = list( x = list(tck = 0, alternating = FALSE)),
panel = function(...){
panel.fill(rgb(.9,.9,.9))
panel.grid(h = 0, v = -1, col = "white", lwd = 2)
panel.dotplot(col = rgb(0,.5,1),cex = 1.1,...)
}
)
dotplot(mat,groups = FALSE,
layout = c(4,1), aspect = .7,
origin = 0,type = c("p","h"),
main = "Who is Raising the Children?",
xlab = "Race Rounded Percents\nMay Not Total 100",
scales = list(x = list(tck = 0, alternating = FALSE)),
panel = function(...){
panel.fill(rgb(.9,.9,.9))
panel.grid(h = 0,v = -1,col = "white",lwd = 2)
panel.dotplot(col = rgb(0,.5,1),cex = 1.1,...)
}
)
mat
oneColumn   # Saved above
mat
mat[6:1,4:1] # reverse both orders
dotplot(mat[6:1,4:1],groups = FALSE,
layout = c(1,4),aspect = .7,
origin = 0,type = c("p","h"),
main = "Who is Raising the Children?",
xlab = "Race Rounded Percents\nMay Not Total 100",
scales = list(x = list(tck = 0, alternating = FALSE)),
panel = function(...){
panel.fill(rgb(.9,.9,.9))
panel.grid(h = 0,v = -1,col = "white",lwd = 2)
panel.dotplot(col = rgb(0,.5,1),cex = 1.1,...)
}
)
mat
typeMeans <- rowMeans(mat)
typeMeans
typeOrd <- order(typeMeans)
cbind(mat,typeMeans)[typeOrd,]
dotplot(mat[typeOrd,4:1],groups = FALSE,
layout = c(1,4),aspect = .7,
type = c("p","l"),
main = "Who is Raising the Children?",
xlab = "Race Rounded Percents\nMay Not Total 100",
scales = list(x = list(tck = 0, alternating =  FALSE)),
panel = function(...){
panel.fill(rgb(.9,.9,.9))
panel.grid(h = 0,v = -1,col = "white",lwd = 2)
panel.dotplot(col = rgb(0,.5,1),cex = 1.1,...)
}
)
raceRow <- t(mat)
rowMeans(raceRow)
rowSums(raceRow)
raceRowL <- prcomp(raceRow)
racePc <- raceRowL$x
racePc
firstPc <- racePc[,1]
firstPc
raceOrd <- order(firstPc)
raceRow[raceOrd,]
matSorted <- mat[typeOrd,rev(raceOrd)]
matSorted
dotplot(matSorted,groups = FALSE,
layout = c(1,4),aspect = .7,
origin = 0,type = c("p","l"),  # changed "h", "l"
main = "Who is Raising the Children?",
xlab = "Race Rounded Percents\nMay Not Total 100",
scales = list(x = list(tck = 0, alternating = FALSE)),
panel = function(...){
panel.fill(rgb(.9,.9,.9))
panel.grid(h = 0,v = -1,col = "white",lwd = 2)
panel.dotplot(col = rgb(0,.5,1),cex = 1.1,...)
}
)
EucDis <- dist(raceRow)
round(EucDis)
racePoints <- cmdscale(EucDis,k = 1)
racePoints
round(dist(racePoints),1)
round(EucDis,1)
round(dist(racePoints),1)
round(EucDis,1)
typePanelSorted <- t(matSorted)
typePanelSorted
typeRaceMeans = colMeans(typePanelSorted)
barchart(typePanelSorted,groups = FALSE,
layout = c(1,6),xlim = c(0,55),
main = "Who is Raising the Children?",
xlab = "Percent",
scales = list(x = list(tck = 0, alternating = FALSE)),
typeRaceMeans = typeRaceMeans,
panel = function(...){
panel.fill(rgb(.9,.9,.9))
panel.grid(h = 0,v = -1,col = "white",lwd = 2)
i <- panel.number()
panel.abline(v = typeRaceMeans[i],col = "red",lwd = 3)
panel.barchart(col = rgb(0,.5,1),cex = .95,...)
}
)
famRace <- as.data.frame(matSorted) # make a data.frame
famRace
types = row.names(famRace)
famRace$Types = factor(types,levels = types)
famRaceType <- gather(famRace,
ke = Race, value = Percent,Asian:Black,
factor_key = TRUE)
famRaceType
ggplot(famRaceType, aes(x = Percent,y = Types)) +
geom_point(fill = "blue", shape = 21, size = 2.8) +
labs(x = "Percent",y = "",
title = "Who's Raising the Children?") +
facet_grid(.~Race) + hw
ord <- order(as.numeric(famRaceType$Race),
as.numeric(famRaceType$Types))
famSorted <- famRaceType[ord,]
famSorted
famSorted <- mutate(famSorted,
G2 = cut(as.numeric(Types),
breaks = c(0, 3.5, 6))
)
famSorted
cbind(as.numeric(famSorted$Race),
as.numeric(famSorted$Types),
as.numeric(famSorted$G2))
ggplot(famSorted,aes(x = Percent,y = Types,group = G2))+
geom_path(color = "blue",size = 1) +
geom_point(shape = 21,fill = "blue", color = "black", size = 2.7) +
geom_point(shape = 21,fill = "white",color = 'white',size = 1) +
labs(x = "Percent",y = "",
title="Who's Raising the Children?") +
facet_grid(.~Race) + hw
famSorted <- mutate(famSorted,
G2 = cut(as.numeric(Types),
breaks = c(0, 2.5,4.5, 6))
)
famSorted
cbind(as.numeric(famSorted$Race),
as.numeric(famSorted$Types),
as.numeric(famSorted$G2))
ggplot(famSorted,aes(x = Percent,y = Types,group = G2))+
geom_path(color = "blue",size = 1) +
geom_point(shape = 21,fill = "blue", color = "black", size = 2.7) +
geom_point(shape = 21,fill = "white",color = 'white',size = 1) +
labs(x = "Percent",y = "",
title="Who's Raising the Children?") +
facet_grid(.~Race) + hw
famSorted
as.numeric(c('a','b','c'))
class(famSorted$Types)
test <- c('a','b','c')
class(test)
test
test1 <- factor(test)
test1
as.numeric(test)
mymat = cbind(test, c(1,2,3))
mymat
mydf = mymat.as.dataframe
mydf = mymat.as.dataframe()
mydf = as.data.frame(mymat)
mydf
dfsort = mutate(mydf, G2 = cut(as.numeric(test), breaks = c(0,1.5,3)))
dfsort
class(dfsort$test)
class(dfsort$V2)
class(dfsort$G2)
library(tidyverse)
source('hw.R')
set.seed(37)
sample1 <- rnorm(5, mean=10, sd=3)
sample1
round(sample1)
set.seed(37)
sample2 <- rnorm(5, mean=10, sd=0.1)
sample2
round(sample2)
cumProb <- seq(.0001,.9999,length = 1000)
quants <- qnorm(cumProb, mean = 0, sd = )
den <- dnorm(quants, mean = 0, sd = 1)
tib1 <- tibble(cumProb,quants,den)
ggplot(tib1,aes(x = quants,y = den)) +
geom_polygon(fill = 'cyan',color = 'black',size = .5) +
labs(x = 'Quantiles',y = 'Density',
title='Standard Normal Density  Plot') + hw
ggplot(tib1,aes(x = quants,y = cumProb))+
geom_line(color = 'blue',size = 1.7) +
labs(x = 'Quantiles',y = 'Cumulative Probability',
title = 'Standard Normal Cumulative Probability Plot') + hw
ggplot(tib1,aes(x = cumProb,y = quants)) +
geom_line(color = 'blue',size = 1.7) +
labs(x = 'Cumulative  Probabilty',y = 'Quantiles',
title = 'Standard Normal Quantile Plot') + hw
set.seed(41)
samp = rpois(n = 1000,lambda = 2)
mean(samp)
table(samp)
len(samp)
length(samp)
help(table)
set.seed(41)
samp <- rgamma(n = 1000,shape = 5,rate = 2)
mean(samp)
cumProb <- seq(.0001,.9999,length = 1000)
quants <- qgamma(cumProb,shape = 50, rate = 1)
den <- dgamma(quants,shape = 50,rate = 1)
tib2 <- tibble(cumProb,quants,den)
ggplot(tib2,aes(x = quants,y = den)) +
geom_polygon(fill = 'cyan',color = 'black',size=.5) +
labs(x = 'Quantiles',y = 'Density',
title='Gamma Distribution Shape Parameter 50') + hw
mean(quants)
median(quants)
cumProb <- seq(.0001,.9999,length = 1000)
quants <- qgamma(cumProb,shape = 100, rate = 1)
den <- dgamma(quants,shape = 100,rate = 1)
tib2 <- tibble(cumProb,quants,den)
ggplot(tib2,aes(x = quants,y = den)) +
geom_polygon(fill = 'cyan',color = 'black',size=.5) +
labs(x = 'Quantiles',y = 'Density',
title='Gamma Distribution Shape Parameter 100') + hw
mean(quants)
median(quants)
library(tidyverse)
source('hw.R')
source('hw2.R')
ggplot(data = diamonds, aes(x = carat)) +
geom_histogram(fill = "cyan",color = "black") + hw
ggplot(data = diamonds, aes(x = carat)) +
geom_histogram(fill="cyan",color = "black",bin = 50) + hw
ggplot(data = diamonds, aes(x = carat)) +
geom_histogram(fill = "cyan",color = "black",bins = 50) +
xlim(0,3.5) +  hw
ggplot(data=diamonds, aes(x=carat)) +
geom_density(fill = "cyan", color = "black") + hw
ggplot(data=diamonds, aes(x = carat)) +
geom_density(fill = "cyan",color = "black",adjust = 2) + hw
ggplot(data = diamonds, aes(x = carat, color = cut)) +
geom_density(fill = "cyan", color = "black",
kernel="epanechnikov", adjust = 2) + hw
ggplot(data = diamonds, aes( x = carat, group = cut, fill = cut)) +
geom_density( color = "black", adjust = 2, alpha = .2) +
scale_fill_manual(
values = c("red", "yellow", "green","cyan", "violet"),
na.value="grey70") + hw
ggplot(data = diamonds, aes(x = carat,group = cut,fill = cut)) +
geom_density(color = "black",adjust = 2,alpha = .2) +
xlim(0,3.5)
scat <- ggplot(diamonds, aes( x = carat, y = price) )
scat + geom_point() + stat_smooth() + hw
scat + geom_point( aes( color = color) ) + hw
scat + geom_point(aes(color = color)) +
facet_wrap(~color) + hw +
theme(legend.position = 'none')
scat + geom_point(aes(color = color)) +
facet_grid(clarity~color) + hw2
scat2 <- ggplot(diamonds, aes( x = carat, y = price/1000) )
scat2 + geom_point(aes( color = color)) +
facet_grid( clarity~cut ) +
xlim(0,3.5) +
labs(x = "Carats, 9 Diamonds With Carats > 3.5 removed",
y = "Price in $1000",
title = paste("Diamonds: Row Panels for Clarity Classes",
"Column Panels for Cut Classes",sep = "\n"),
color = "Color") + hw2
ggplot(diamonds,aes(x = carat,y = price/1000,
group = cut, color = cut)) +
geom_point() + stat_smooth(size = 2) + hw +
scale_color_manual(
values = c("red", "yellow", "green","cyan", "violet"),
na.value = "grey70") + hw +
labs(x = "Carats",
y = "Price in $1000",
title = "Price to Carat Relationship Varies with Cut",
color = "Cut") + ylim(0,20)
# Change this to reflect wherever you've cloned this repo on your machine
setwd("/Users/iaa211/Documents/ContinuedEducation/GMU-Masters/STAT515/Redesign1/SportsRadarTennis-STAT515")
# Change this to reflect wherever you've cloned this repo on your machine
setwd("/Users/zackkingbackup/Documents/Grad Schools/GMU_Masters/STAT515/RedesignProject1/SportsRadarTennis-STAT515")
library(tidyverse)
source('hw.R') # Instructor provided ggplot theme
source('ggplotHelpers.R') # cookbook-r.com helper functions
nddata <- as_tibble(read_csv("datasets/NovakDjokovic2019matchStats.csv"))
# Create a subset using columns that represent Ace Pct, DF Pct, 1st In Pct,
# 1st win Pct, and 2nd win Pct
# So we'll cbind together: "ace_percentage", "double_fault_percentage", "first_serve_pct",
# "first_serve_points_won_pct", "second_serve_points_won_pct"
# and we'll need "is_winner" and "surface" in case we want to color-code or
# break down splits as is done on https://tennisvisuals.com/
# in order to create bar graphs with errorbars
bar_tibble1 <- nddata[names(nddata) %in% c("ace_percentage","double_fault_percentage","first_serve_pct","first_serve_points_won_pct","second_serve_points_won_pct","is_winner","surface")]
bar_tibble2 <- summarySEwithin(bar_tibble1, measurevar="ace_percentage", withinvars=c("surface","is_winner"))
library(ggplot2)
ggplot(bar_tibble2, aes(x=surface, y=ace_percentage, fill=is_winner)) +
geom_bar(position=position_dodge(.9), colour="black", stat="identity") +
geom_errorbar(position=position_dodge(.9), width=.25, aes(ymin=ace_percentage-ci, ymax=ace_percentage+ci)) +
ggtitle("Novak Djokovic 2019 Ace Percentage 95% CIs") +
labs(x="Court Surface", y="Ace Percentage") +
hw
# Mild problem - Djokovic's only grass tournament was wimbledon... and he won it so there are no losses
# Solution - Append a row of zeros for the missing record identified by surface=grass, is_winner=FALSE
bar_tibble3 <- rbind(bar_tibble2[1,], c("Grass",FALSE,0,0,0,0,0,0), bar_tibble2[c(2:5),])
bar_tibble3$ace_percentage = as.numeric(bar_tibble3$ace_percentage)
bar_tibble3$ci = as.numeric(bar_tibble3$ci)
ggplot(bar_tibble3, aes(x=surface, y=ace_percentage, fill=is_winner)) +
geom_bar(position=position_dodge(.9), colour="black", stat="identity") +
geom_errorbar(position=position_dodge(.9), width=.25, aes(ymin=ace_percentage-ci, ymax=ace_percentage+ci)) +
ggtitle("Novak Djokovic 2019 Ace Percentage 95% CIs") +
labs(x="Court Surface", y="Ace Percentage") +
hw
names(nddata)
# First compute the Dominance Rating (DR) = % pts won returning / % pts lost serving
tibble2 <- nddata[names(nddata) %in% c("ace_percentage","double_fault_percentage","first_serve_pct","first_serve_points_won_pct","second_serve_points_won_pct","is_winner","surface",
"opp_service_points_won","service_points_won","opp_receiver_points_won","receiver_points_won")]
get_DR <- function(spw, ospw, rpw, orpw)
{
pct_return_won = rpw / (ospw + rpw)
pct_serve_lost = orpw / (spw + orpw)
return (pct_return_won / pct_serve_lost)
}
apply(tibble2[,c('serve_points_won','opp_serve_points_won','receiver_points_won','opp_receiver_points_won')], 1, function(x) get_DR(x[1],x[2],x[3],x[4]))
apply(tibble2[,c('service_points_won','opp_service_points_won','receiver_points_won','opp_receiver_points_won')], 1, function(x) get_DR(x[1],x[2],x[3],x[4]))
tibble2
tibble2$DR <- apply(tibble2[,c('service_points_won','opp_service_points_won','receiver_points_won','opp_receiver_points_won')], 1, function(x) get_DR(x[1],x[2],x[3],x[4]))
tibble2$DR
# Plot DR v. ace_percentage
ggplot(tibble2, aes(x=DR,y=ace_percentage)) +
geom_point(mapping=surface,shape=factor(is_winner)) +
hw
names(tibble2)
# Plot DR v. ace_percentage
ggplot(tibble2, aes(x=DR,y=ace_percentage)) +
geom_point(data=tibble2,mapping=surface,shape=factor(is_winner)) +
hw
# Plot DR v. ace_percentage
ggplot(tibble2, aes(x=DR,y=ace_percentage)) +
geom_point(mapping=surface) +
hw
# Plot DR v. ace_percentage
ggplot(tibble2, aes(x=DR,y=ace_percentage)) +
geom_point(aes(mapping=surface, shape=is_winner)) +
hw
# Plot DR v. ace_percentage
ggplot(tibble2, aes(x=DR,y=ace_percentage,fill=is_winner)) +
geom_point(aes(shape=surface)) +
hw
# Plot DR v. ace_percentage
ggplot(tibble2, aes(x=DR,y=ace_percentage,fill=is_winner)) +
geom_point(aes(shape=surface)) +
hw
# Plot DR v. ace_percentage
ggplot(tibble2, aes(x=DR,y=ace_percentage,fill=is_winner)) +
# Plot DR v. ace_percentage
ggplot(tibble2, aes(x=DR,y=ace_percentage,fill=factor(is_winner)) +
# Plot DR v. ace_percentage
ggplot(tibble2, aes(x=DR,y=ace_percentage) +
